This is a framework for writing bots that play Hanabi.
http://boardgamegeek.com/boardgame/98778/hanabi
http://www.rnrgames.com/images/ProductRules/hanabiRules.PDF

The framework now respects all the official rules of Hanabi!

Typing "make" will build all of the bots that the Makefile knows about.
Typing "make FAST=1" will use faster "release build" options.
Appending "OPENMP=1" will enable parallel processing with OpenMP.

There are seven bots provided:

    BlindBot (blindly plays a random card each time)
    SimpleBot (hints about playable cards)
    ValueBot (also warns about valuable cards)
    HolmesBot (also performs inferences, and uses mulligans)
    SmartBot (prefers to play cards its partners don't know it knows)
    CheatBot (secretly radios its partners; that is, cheats)
    NewCheatBot (also cheats)

To run a bot, the command is e.g. "./run_BlindBot".

Current average scores (and percent perfect games) per bot, for 2-4 players:

         2p               3p               4p
Blind     1.25             1.25             1.25
Simple   16.92            18.48            19.32
Value    19.79            19.43            19.39
Holmes   20.75  (5.41%)   20.86  (0.37%)   20.46  (0.04%)
Smart    23.09 (29.52%)   23.30 (19.54%)   22.44  (4.56%)
Cheat    24.90 (93.92%)   24.98 (98.37%)   24.97 (97.94%)
NewCheat 24.72 (85.56%)   24.91 (94.37%)   24.88 (91.20%)

The interesting thing about CheatBot is that the perfect strategy is
difficult to compute, even when hints are redundant.

Notice that CheatBot and NewCheatBot must be built with OPENMP=0,
since their players use global variables to communicate with each other.
CheatBot is very fast, so this isn't much of a disadvantage.
Unfortunately, NewCheatBot is relatively very slow.
